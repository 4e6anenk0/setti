// Mocks generated by Mockito 5.4.5 from annotations
// in setti/test/mocks/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:setti/src/converter/converter_interface.dart' as _i6;
import 'package:setti/src/setting_types/base/setting.dart' as _i2;
import 'package:setti/src/storage/interfaces/settings_storage_interface.dart'
    as _i7;
import 'package:setti/src/storage/storage_overlay.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSetting_0<T1> extends _i1.SmartFake implements _i2.Setting<T1> {
  _FakeSetting_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [StorageOverlay].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageOverlay extends _i1.Mock implements _i3.StorageOverlay {
  MockStorageOverlay() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isPrefixedKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#isPrefixedKey, [key]),
            returnValue: false,
          )
          as bool);

  @override
  bool isNotPrefixedKey(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#isNotPrefixedKey, [key]),
            returnValue: false,
          )
          as bool);

  @override
  bool isPrefixedValue(String? value) =>
      (super.noSuchMethod(
            Invocation.method(#isPrefixedValue, [value]),
            returnValue: false,
          )
          as bool);

  @override
  bool isNotPrefixedValue(String? value) =>
      (super.noSuchMethod(
            Invocation.method(#isNotPrefixedValue, [value]),
            returnValue: false,
          )
          as bool);

  @override
  String prefixed(_i2.Setting<dynamic>? setting) =>
      (super.noSuchMethod(
            Invocation.method(#prefixed, [setting]),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#prefixed, [setting]),
            ),
          )
          as String);

  @override
  void removeCache() => super.noSuchMethod(
    Invocation.method(#removeCache, []),
    returnValueForMissingStub: null,
  );

  @override
  void removeCacheFor(String? id) => super.noSuchMethod(
    Invocation.method(#removeCacheFor, [id]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.FutureOr<T?> getSetting<T>(String? id, T? defaultValue) =>
      (super.noSuchMethod(Invocation.method(#getSetting, [id, defaultValue]))
          as _i5.FutureOr<T?>);

  @override
  _i5.FutureOr<bool> contains(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#contains, [id]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.FutureOr<bool>);

  @override
  _i5.FutureOr<bool> removeSetting(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeSetting, [id]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.FutureOr<bool>);

  @override
  _i5.FutureOr<bool> setSetting(String? id, Object? value) =>
      (super.noSuchMethod(
            Invocation.method(#setSetting, [id, value]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.FutureOr<bool>);

  @override
  _i5.FutureOr<void> removeSettings(Set<String>? keys) =>
      (super.noSuchMethod(Invocation.method(#removeSettings, [keys]))
          as _i5.FutureOr<void>);

  @override
  _i5.FutureOr<void> setSettings(Map<String, Object>? settings) =>
      (super.noSuchMethod(Invocation.method(#setSettings, [settings]))
          as _i5.FutureOr<void>);
}

/// A class which mocks [ISettingConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockISettingConverter<T extends _i2.BaseSetting<dynamic>> extends _i1.Mock
    implements _i6.ISettingConverter<T> {
  MockISettingConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Setting<dynamic> convertTo(T? targetSetting) =>
      (super.noSuchMethod(
            Invocation.method(#convertTo, [targetSetting]),
            returnValue: _FakeSetting_0<dynamic>(
              this,
              Invocation.method(#convertTo, [targetSetting]),
            ),
          )
          as _i2.Setting<dynamic>);

  @override
  T convertFrom<V>(V? value, T? targetSetting) =>
      (super.noSuchMethod(
            Invocation.method(#convertFrom, [value, targetSetting]),
            returnValue: _i4.dummyValue<T>(
              this,
              Invocation.method(#convertFrom, [value, targetSetting]),
            ),
          )
          as T);

  @override
  V2 convertValue<V1, V2>(V1? value, T? targetSetting) =>
      (super.noSuchMethod(
            Invocation.method(#convertValue, [value, targetSetting]),
            returnValue: _i4.dummyValue<V2>(
              this,
              Invocation.method(#convertValue, [value, targetSetting]),
            ),
          )
          as V2);

  @override
  dynamic getCache(T? targetSetting) =>
      super.noSuchMethod(Invocation.method(#getCache, [targetSetting]));

  @override
  void clearCache() => super.noSuchMethod(
    Invocation.method(#clearCache, []),
    returnValueForMissingStub: null,
  );

  @override
  void preset<V>({
    required T? targetSetting,
    required String? id,
    required V? data,
  }) => super.noSuchMethod(
    Invocation.method(#preset, [], {
      #targetSetting: targetSetting,
      #id: id,
      #data: data,
    }),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ISettingsStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockISettingsStorage extends _i1.Mock implements _i7.ISettingsStorage {
  MockISettingsStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(
            Invocation.getter(#id),
            returnValue: _i4.dummyValue<String>(this, Invocation.getter(#id)),
          )
          as String);

  @override
  _i5.FutureOr<bool> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.FutureOr<bool>);

  @override
  _i5.Future<void> setSettings(Map<String, dynamic>? settings) =>
      (super.noSuchMethod(
            Invocation.method(#setSettings, [settings]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> removeSettings(Set<String>? keys) =>
      (super.noSuchMethod(
            Invocation.method(#removeSettings, [keys]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.FutureOr<T?> getSetting<T>(String? id, T? defaultValue) =>
      (super.noSuchMethod(Invocation.method(#getSetting, [id, defaultValue]))
          as _i5.FutureOr<T?>);

  @override
  _i5.FutureOr<bool> setSetting(String? id, Object? value) =>
      (super.noSuchMethod(
            Invocation.method(#setSetting, [id, value]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.FutureOr<bool>);

  @override
  _i5.FutureOr<bool> removeSetting(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeSetting, [id]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.FutureOr<bool>);

  @override
  _i5.FutureOr<bool> contains(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#contains, [id]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.FutureOr<bool>);
}

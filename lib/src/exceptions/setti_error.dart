/// –ü–æ–º–∏–ª–∫–∞, —è–∫–∞ –≤–∏–Ω–∏–∫–∞—î –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö.
///
/// `[msg]` - –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏.
/// `[solutionMsg]` - –ø—ñ–¥–∫–∞–∑–∫–∞ –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è.
/// `[label]` - –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ–º–∏–ª–∫–∏.
/// `[isPretty]` - —á–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –µ–º–æ–¥–∑—ñ.
class SettiError implements Error {
  const SettiError({
    required this.msg,
    this.solutionMsg = "",
    required this.label,
    this.isPretty = false,
    this.stackTrace,
  });

  final String msg;
  final String solutionMsg;
  final String label;

  final bool isPretty;

  @override
  final StackTrace? stackTrace;

  SettiError.withStackTrace({
    required this.msg,
    required this.label,
    this.solutionMsg = "",
    this.isPretty = false,
    StackTrace? stackTrace,
  }) : stackTrace = stackTrace ?? StackTrace.current;

  String prettifyMsg() {
    final solutionPart =
        solutionMsg.isNotEmpty ? "\nüí° Solution: $solutionMsg" : "";
    return "‚ùå $label: $msg\n$solutionPart";
  }

  @override
  String toString() {
    final stackPart = stackTrace != null ? "\nStackTrace: $stackTrace" : "";
    final solutionPart =
        solutionMsg.isNotEmpty ? "\nSolution: $solutionMsg" : "";
    return isPretty
        ? prettifyMsg() + stackPart
        : "$label: $msg $solutionPart $stackPart";
  }
}

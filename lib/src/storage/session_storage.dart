/* Налаштування, які мають актуальність лише під час сесії та потребують скидання до значення за замовчуванням після її завершення,
зазвичай включають ті параметри, які не повинні зберігатися між сесіями або перезапусками застосунку.
Це налаштування, що керують поведінкою програми лише в межах активної сесії користувача.

Ось кілька прикладів таких налаштувань:

2. Сеансові дані користувача
Тимчасова автентифікація/сесійний токен — зберігається лише на час сесії, а потім має бути скинуто.
Вибір сесійного контексту — наприклад, якщо користувач вибирає певну категорію чи
підкатегорію даних під час сесії, це може зберігатися лише до закриття застосунку.

3. Фільтри та сортування даних
Фільтри пошуку — наприклад, якщо користувач застосовує фільтри до списку товарів, фільтри можуть бути актуальними лише протягом сесії.
Сортування в таблицях або списках — користувач може тимчасово змінювати порядок елементів, і ці зміни не повинні зберігатися після завершення сесії.

4. Задачі або нагадування, які виконуються в межах сесії
Тимчасові налаштування завдань (наприклад, задавати конкретні пріоритети завдань або тимчасові нагадування).
Проміжні результати обчислень або налаштування для поточної сесії, які не потребують збереження.

5. Стан програми, пов'язаний з інтерфейсом
Позиція в списку чи прокрутка екрану — якщо користувач прокручує великий список, ви можете зберігати це лише для поточної сесії.
Розкриті або закриті секції в інтерфейсі — наприклад, розгорнуті списки або налаштування.

6. Інтерактивні налаштування під час роботи
Статус "Включити/Вимкнути" для функцій, які працюють лише під час сесії (наприклад, спеціальні функції або тимчасові режими роботи).
Стан чи прогрес в анімаціях, відео чи інтерфейсних компонентах — прогрес у перегляді, зміни стану під час сесії.

7. Тимчасове кешування даних
Сесійний кеш — тимчасове зберігання даних, які не потребують збереження після завершення роботи програми
(наприклад, дані, завантажені з серверу для поточної сесії, але не потрібні після перезапуску). */

import 'dart:async';
import 'dart:collection';

import 'package:meta/meta.dart';

import 'interfaces/storage_worker_interface.dart';

@internal
class SessionStorage implements ISettingsWorker {
  HashMap<String, Object> get settings => _settings;

  final HashMap<String, Object> _settings = HashMap();

  @override
  void clear() {
    _settings.clear();
  }

  @override
  T? getSetting<T>(String id, T defaultValue) {
    return _settings[id] as T;
  }

  @override
  bool contains(String id) {
    return _settings.containsKey(id);
  }

  @override
  bool removeSetting(String id) {
    _settings.remove(id);
    return true;
  }

  @override
  bool setSetting(String id, Object value) {
    _settings[id] = value;
    return true;
  }

  @override
  FutureOr<void> removeSettings(Set<String> keys) {
    for (var key in keys) {
      _settings.remove(key);
    }
  }

  @override
  FutureOr<void> setSettings(Map<String, Object> settings) {
    for (var entry in settings.entries) {
      _settings[entry.key] = entry.value;
    }
  }
}
